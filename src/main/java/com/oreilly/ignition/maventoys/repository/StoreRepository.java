package com.oreilly.ignition.maventoys.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.oreilly.ignition.maventoys.model.entity.Sale;
import com.oreilly.ignition.maventoys.model.entity.Store;

/**
 * This interface represents a repository for managing Store entities.
 */
public interface StoreRepository extends JpaRepository<Store, Integer> {

    /**
     * Retrieves a list of sales associated with a specific store.
     * @param storeId the ID of the store
     * @return a list of Sale objects
     */
    @Query("SELECT s FROM Sale s WHERE s.store.id = :storeId")
    List<Sale> findSales(@Param("storeId") Integer storeId);

    /**
     * Calculates the total revenue generated by a specific store.
     * @param storeId the ID of the store
     * @return the total revenue as a Double value
     */
    @Query("SELECT SUM(s.total) FROM Sale s WHERE s.store.id = :storeId")
    Double getRevenue(@Param("storeId") Integer storeId);

    /**
     * Retrieves the total number of active stores.
     * @return the total number of active stores as an Integer value
     */
    @Query(value = "SELECT COUNT(*) FROM stores WHERE active = 1", nativeQuery = true)
    Integer getTotalStores();

    /**
     * Retrieves the top 10 stores with the highest revenue.
     * @return a list of Object arrays, where each array contains the store name and
     *         revenue
     */
    @Query(value = "SELECT st.name, SUM(total) AS revenue FROM sales s INNER JOIN" +
            "stores st ON s.store_id = st.id GROUP BY st.name ORDER BY revenue DESC LIMIT 10", nativeQuery = true)
    List<Object[]> getRevenueByStore();
}
